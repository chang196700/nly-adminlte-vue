{
  "name": "@nly-admintle-vue/table",
  "version": "1.0.0",
  "meta": {
    "title": "Table",
    "subtitle": "表格",
    "description": "一个支持分页，过滤，排序，异步数据等功能的表格",
    "plugins": [
      "TableLitePlugin",
      "TableSimplePlugin"
    ],
    "components": [
      {
        "component": "NlyTable",
        "props": [
          {
            "prop": "striped",
            "description": "设置 true， table 会显示条纹式样"
          },
          {
            "prop": "bordered",
            "description": "设置 true 会给所有单元格和头部添加圆角边框式样"
          },
          {
            "prop": "borderless",
            "description": "移除所有单元格的边框"
          },
          {
            "prop": "outlined",
            "description": "给表格所有元素添加外边框"
          },
          {
            "prop": "dark",
            "description": "表格黑色模式"
          },
          {
            "prop": "hover",
            "description": "添加鼠标悬浮式样"
          },
          {
            "prop": "small",
            "description": "小型表格"
          },
          {
            "prop": "fixed",
            "description": "设置每列等宽，会加快渲染速度"
          },
          {
            "prop": "responsive",
            "description": "使得表格自适应宽度并添加水平滚动条，可选 'sm', 'md', 'lg', 'xl' 或者 'true', 由于adminlte3的bug，（其实是bootstrap的bug）, 通常水平滚动条并不会出现。可以在 table 外面套一层'<div class='table-responsive'>'"
          },
          {
            "prop": "stickyHeader",
            "description": "设置 true 会使得头部悬浮. 并且表格的最大高度为 300px, 使用其他 css 或者 style 可以设置表格的高度"
          },
          {
            "prop": "noBorderCollapse",
            "version": "0.4.4",
            "description": "禁用表格边框折叠. 当使用 stickyHeader 时很有效"
          },
          {
            "prop": "captionTop",
            "description": "将表格标题放在表格上方"
          },
          {
            "prop": "tableVariant",
            "description": "表格颜色"
          },
          {
            "prop": "tableClass",
            "description": "自定义表格元素的 css 类"
          },
          {
            "prop": "stacked",
            "description": "表格堆叠模式. 设置 true 使得表格一直处于堆叠模式, 或者可以设置为对应的 'sm', 'md', 'lg', 'xl' 断点来使得表格在对应的断点变成堆叠模式"
          },
          {
            "prop": "headVariant",
            "description": "头部颜色， 可选 'light' or 'dark', or unset. 会覆盖 head-row-variant"
          },
          {
            "prop": "headRowVariant",
            "version": "0.4.4",
            "description": "给 thead 元素中的 tr 元素设置颜色"
          },
          {
            "prop": "footVariant",
            "description": "底部颜色，可选 'light' or 'dark', or unset. 会覆盖 foot-row-variant"
          },
          {
            "prop": "footRowVariant",
            "version": "0.4.4",
            "description": "给 tfoot 中的 tr 元素设置颜色"
          },
          {
            "prop": "tbodyTransitionProps",
            "description": "Vue 'transition-group' 过渡动画. 设置的时候会给 tbody 添加'transition-group' 组件"
          },
          {
            "prop": "tbodyTransitionHandlers",
            "description": "给 tbody 添加 Vue 'transition-group' 过渡动画的事件"
          },
          {
            "prop": "caption",
            "description": "标题元素中的文本字符串"
          },
          {
            "prop": "captionHtml",
            "description": "标题元素中的 html 文本字符串"
          },
          {
            "prop": "theadClass",
            "description": "自定义 thead css 类"
          },
          {
            "prop": "theadTrClass",
            "description": "自定义 thead 中 tr 元素的 css 类"
          },
          {
            "prop": "footClone",
            "description": "启用表格页脚，并默认复制头部内容"
          },
          {
            "prop": "tfootClass",
            "description": "自定义 tfoot 的 css 类"
          },
          {
            "prop": "tfootTrClass",
            "description": "自定义 tfoot 中 tr 的 css 类"
          },
          {
            "prop": "tbodyClass",
            "description": "自定义 tbody 的 css 类"
          },
          {
            "prop": "tbodyTrClass",
            "description": "自定义 tbody 中 tr 的 css 类. 可以是一个返回 css 类的函数"
          },
          {
            "prop": "tbodyTrAttr",
            "version": "0.4.4",
            "description": "添加到 tbody 中 tr 的 attr 属性 , 可以是一个返回 attr 属性的函数"
          },
          {
            "prop": "detailsTdClass",
            "version": "0.4.4",
            "description": "自定义 row-details slot 中 td 元素的 css 类"
          },
          {
            "prop": "value",
            "description": "当前行的数据. 只读. 请不要给这个 prop 传值"
          },
          {
            "prop": "fields",
            "description": "表头名称或者自定义名称，是一个数组类型"
          },
          {
            "prop": "items",
            "description": "表格显示数据内容， 是一个数组类型"
          },
          {
            "prop": "primaryKey",
            "description": "给表格每一行添加一个唯一值， 如果给表格添加过渡动画，需要给表格每一添加一个唯一值。会加快表格渲染速度。但是过渡动画可能存在bug"
          },
          {
            "prop": "busy",
            "description": "设置表格 busy 状态 "
          },
          {
            "prop": "noProviderPaging",
            "description": "设置 true， 会使用内部分页， 配合 nly-bootstrap-pagination. 否则需要用户自己编写分页逻辑代码"
          },
          {
            "prop": "noProviderSorting",
            "description": "设置 true， 会使用表格自带 排序逻辑"
          },
          {
            "prop": "noProviderFiltering",
            "description": "设置 true， 会使用表格自带 过滤逻辑"
          },
          {
            "prop": "apiUrl",
            "description": ""
          },
          {
            "prop": "perPage",
            "description": "每页显示的数据条数，设置为0禁用分页"
          },
          {
            "prop": "currentPage",
            "description": "使用分页时当前数据要显示的页码，请设置为大于等于 1 的数字"
          },
          {
            "prop": "noLocalSorting",
            "description": "禁用自带 排序逻辑，如果用户没有提供自定义排序逻辑， 自带排序逻辑还是可以用"
          },
          {
            "prop": "noFooterSorting",
            "description": "使用自带格式化功能时， 禁用底部排序功能"
          },
          {
            "prop": "sortIconLeft",
            "description": "将排序的图标放在文本的左边"
          },
          {
            "prop": "noSortReset",
            "description": "如果是一个可排序的表格， 点击任意不可排序的列头时，会清清除所有排序，设置 true 来禁用此功能"
          },
          {
            "prop": "sortNullLast",
            "description": "排序时，会先对 null 或者 undefined 进行排序， 设置 true 会把 null 或者 undefined 放到最后排序， 仅支持自带排序"
          },
          {
            "prop": "sortBy",
            "description": "设置排序猎命， 设置 null 清除排序"
          },
          {
            "prop": "sortDesc",
            "description": "对排序的列进行降序排序"
          },
          {
            "prop": "sortDirection",
            "description": "对未进行排序，切不可排序的列进行初始化排序，即将这些列按照内定的 降序，升序规则排序之后再渲染表格"
          },
          {
            "prop": "sortCompare",
            "description": "两队排序比较函数"
          },
          {
            "prop": "sortCompareOptions",
            "description": "一 包含 'String.prototype.sortLocale' 排序配置的 '方法"
          },
          {
            "prop": "sortCompareLocale",
            "description": "The locale string (or array of locale string) that specified the language when sorting. See docs for details"
          },
          {
            "prop": "labelSortAsc",
            "description": "Hidden string to place in the header cell when clicking the cell will change the sort direction to ascending"
          },
          {
            "prop": "labelSortDesc",
            "description": "Hidden string to place in the header cell when clicking the cell will change the sort direction to descending"
          },
          {
            "prop": "labelSortClear",
            "description": "Hidden string to place in the header cell when clicking the cell will clear the current sorting direction"
          },
          {
            "prop": "selectable",
            "description": "When set, places the table body rows in selectable mode"
          },
          {
            "prop": "selectMode",
            "description": "The selectable mode for the table when 'selectable' is set. Possible values: 'single', 'multi' or 'range'"
          },
          {
            "prop": "selectedVariant",
            "description": "Bootstrap color theme variant to set selected rows to. Use any of the standard Bootstrap theme color variants, or the special table row variant 'active' (default). Set to an empty string to not use a variant"
          },
          {
            "prop": "noSelectOnClick",
            "version": "0.4.4",
            "description": "Disables row selection via click events. Row selection will be only available programmatically"
          },
          {
            "prop": "showEmpty",
            "description": "When enabled, and there are no item records to show, shows a message that there are no rows to show"
          },
          {
            "prop": "emptyText",
            "description": "Text string to show when the table has no items to show"
          },
          {
            "prop": "emptyHtml",
            "description": "HTML string to show when the table has no items to show. Use with caution"
          },
          {
            "prop": "emptyFilteredText",
            "description": "Text string to show when the table has no items to show due to filtering"
          },
          {
            "prop": "emptyFilteredHtml",
            "description": "HTML string to show when the table has no items to show due to filtering. Use with caution"
          },
          {
            "prop": "filter",
            "description": "Criteria for filtering. Internal filtering supports only string or RegExpr criteria."
          },
          {
            "prop": "filterFunction",
            "description": "Reference to a function to use instead of the internal filtering function. Refer to the docs for details"
          },
          {
            "prop": "filterIgnoredFields",
            "description": "Array of top level fields to ignore when filtering the item data"
          },
          {
            "prop": "filterIncludedFields",
            "description": "Array of fields to include when filtering. Overrides filter-ignore-fields"
          },
          {
            "prop": "filterDebounce",
            "version": "0.4.4",
            "description": "Time in milliseconds to debounce changes to the filter criteria before filtering the records"
          }
        ],
        "events": [
          {
            "event": "row-clicked",
            "description": "Emitted when a row is clicked.",
            "args": [
              {
                "arg": "item",
                "type": "Object",
                "description": "Item data of the row being clicked."
              },
              {
                "arg": "index",
                "type": "Number",
                "description": "Index of the row being clicked."
              },
              {
                "arg": "event",
                "type": [
                  "MouseEvent",
                  "KeyboardEvent"
                ],
                "description": "Native event object."
              }
            ]
          },
          {
            "event": "row-dblclicked",
            "description": "Emitted when a row is double clicked.",
            "args": [
              {
                "arg": "item",
                "type": "Object",
                "description": "Item data of the row being double clicked."
              },
              {
                "arg": "index",
                "type": "Number",
                "description": "Index of the row being double clicked."
              },
              {
                "arg": "event",
                "type": "MouseEvent",
                "description": "Native event object."
              }
            ]
          },
          {
            "event": "row-middle-clicked",
            "description": "Emitted when a row is middle clicked.",
            "args": [
              {
                "arg": "item",
                "type": "Object",
                "description": "Item data of the row being middle clicked."
              },
              {
                "arg": "index",
                "type": "Number",
                "description": "Index of the row being middle clicked."
              },
              {
                "arg": "event",
                "type": "MouseEvent",
                "description": "Native event object."
              }
            ]
          },
          {
            "event": "row-contextmenu",
            "description": "Emitted when a row is right clicked.",
            "args": [
              {
                "arg": "item",
                "type": "Object",
                "description": "Item data of the row being right clicked."
              },
              {
                "arg": "index",
                "type": "Number",
                "description": "Index of the row being right clicked."
              },
              {
                "arg": "event",
                "type": "MouseEvent",
                "description": "Native event object."
              }
            ]
          },
          {
            "event": "row-hovered",
            "description": "Emitted when a row is hovered.",
            "args": [
              {
                "arg": "item",
                "type": "Object",
                "description": "Item data of the row being hovered."
              },
              {
                "arg": "index",
                "type": "Number",
                "description": "Index of the row being hovered."
              },
              {
                "arg": "event",
                "type": "MouseEvent",
                "description": "Native event object."
              }
            ]
          },
          {
            "event": "row-unhovered",
            "description": "Emitted when a row is unhovered.",
            "args": [
              {
                "arg": "item",
                "type": "Object",
                "description": "Item data of the row being unhovered."
              },
              {
                "arg": "index",
                "type": "Number",
                "description": "Index of the row being unhovered."
              },
              {
                "arg": "event",
                "type": "MouseEvent",
                "description": "Native event object."
              }
            ]
          },
          {
            "event": "row-selected",
            "description": "Emitted when a row or rows have been selected or unselected.",
            "args": [
              {
                "arg": "rows",
                "type": "Array",
                "description": "Array of the row items that are selected."
              }
            ]
          },
          {
            "event": "head-clicked",
            "description": "Emitted when a header or footer cell is clicked. Not applicable for 'custom-foot' slot.",
            "args": [
              {
                "arg": "key",
                "type": "String",
                "description": "Column key clicked (field name)."
              },
              {
                "arg": "field",
                "type": "Object",
                "description": "Field definition object."
              },
              {
                "arg": "event",
                "type": [
                  "MouseEvent",
                  "KeyboardEvent"
                ],
                "description": "Native event object."
              },
              {
                "arg": "isFooter",
                "type": "Boolean",
                "description": "'True' if this event originated from clicking on the footer cell"
              }
            ]
          },
          {
            "event": "sort-changed",
            "description": "Emitted when the sorting on the table has changed",
            "args": [
              {
                "arg": "ctx",
                "type": "Object",
                "description": "Table state context object. See docs."
              }
            ]
          },
          {
            "event": "context-changed",
            "description": "Emitted whenever the table state context has changed",
            "args": [
              {
                "arg": "ctx",
                "type": "Object",
                "description": "Table state context object. See docs."
              }
            ]
          },
          {
            "event": "filtered",
            "description": "Emitted when local filtering causes a change in the number of items.",
            "args": [
              {
                "arg": "filteredItems",
                "type": "Array",
                "description": "Array of items after filtering (before local pagination occurs)."
              }
            ]
          },
          {
            "event": "refreshed",
            "description": "Emitted when the items provider function has returned data."
          }
        ],
        "rootEventListeners": [
          {
            "event": "bv::refresh::table",
            "description": "Refresh data of a specific table when this event is emitted on $root",
            "args": [
              {
                "arg": "id",
                "type": "String",
                "description": "table id to refresh data"
              }
            ]
          }
        ],
        "slots": [
          {
            "name": "cell({key})",
            "pattern": "cell\\([a-zA-Z0-9$_.\\-]+\\)",
            "description": "Scoped slot for custom data rendering of field data. '{key}' is the field's key name. See docs for scoped data",
            "scope": [
              {
                "prop": "index",
                "type": "Number",
                "description": "The row's index (zero-based) with respect to the displayed rows"
              },
              {
                "prop": "item",
                "type": "Object",
                "description": "The row's item data object"
              },
              {
                "prop": "value",
                "description": "The value for this key in the record (null or undefined if a virtual column), or the output of the field's formatter function"
              },
              {
                "prop": "unformatted",
                "description": "The raw value for this key in the item record (null or undefined if a virtual column), before being passed to the field's formatter function"
              },
              {
                "prop": "field",
                "type": "Object",
                "description": "The field's normalized definition object (from the fields prop)"
              },
              {
                "prop": "detailsShowing",
                "type": "Boolean",
                "description": "Will be true if the row's row-details scoped slot is visible"
              },
              {
                "prop": "toggleDetails",
                "type": "Function",
                "description": "Can be called to toggle the visibility of the rows row-details scoped slot"
              },
              {
                "prop": "rowSelected",
                "type": "Boolean",
                "description": "Will be true if the row has been selected. Only applicable when table is in selectable mode"
              },
              {
                "prop": "selectRow",
                "type": "Function",
                "version": "2.1.0",
                "description": "Can be called to select the current row. Only applicable when table is in selectable mode"
              },
              {
                "prop": "unselectRow",
                "type": "Function",
                "version": "2.1.0",
                "description": "Can be called to unselect the current row. Only applicable when table is in selectable mode"
              }
            ]
          },
          {
            "name": "cell()",
            "description": "Default scoped slot for custom data rendering of field data. See docs for scoped data",
            "scope": [
              {
                "prop": "index",
                "type": "Number",
                "description": "The row's index (zero-based) with respect to the displayed rows"
              },
              {
                "prop": "item",
                "type": "Object",
                "description": "The row's item data object"
              },
              {
                "prop": "value",
                "description": "The value for this key in the record (null or undefined if a virtual column), or the output of the field's formatter function"
              },
              {
                "prop": "unformatted",
                "description": "The raw value for this key in the item record (null or undefined if a virtual column), before being passed to the field's formatter function"
              },
              {
                "prop": "field",
                "type": "Object",
                "description": "The field's normalized definition object (from the fields prop)"
              },
              {
                "prop": "detailsShowing",
                "type": "Boolean",
                "description": "Will be true if the row's row-details scoped slot is visible"
              },
              {
                "prop": "toggleDetails",
                "type": "Function",
                "description": "Can be called to toggle the visibility of the rows row-details scoped slot"
              },
              {
                "prop": "rowSelected",
                "type": "Boolean",
                "description": "Will be true if the row has been selected. Only applicable when table is in selectable mode"
              },
              {
                "prop": "selectRow",
                "type": "Function",
                "version": "2.1.0",
                "description": "Can be called to select the current row. Only applicable when table is in selectable mode"
              },
              {
                "prop": "unselectRow",
                "type": "Function",
                "version": "2.1.0",
                "description": "Can be called to unselect the current row. Only applicable when table is in selectable mode"
              }
            ]
          },
          {
            "name": "head({key})",
            "pattern": "head\\([a-zA-Z0-9$_.\\-]+\\)",
            "description": "Scoped slot for custom rendering of field header. '{key}' is the field's key name. See docs for scoped header",
            "scope": [
              {
                "prop": "column",
                "type": "String",
                "description": "The field's key value"
              },
              {
                "prop": "field",
                "type": "Object",
                "description": "The field's normalized definition object (from the fields prop)"
              },
              {
                "prop": "label",
                "type": "String",
                "description": "The field's label value"
              },
              {
                "prop": "selectAllRows",
                "type": "Function",
                "description": "Select all rows (applicable if the table is in selectable mode)"
              },
              {
                "prop": "clearSelected",
                "type": "Function",
                "description": "Unselect all rows (applicable if the table is in selectable mode)"
              },
              {
                "prop": "isFoot",
                "type": "Boolean",
                "description": "Will be true if the slot is being rendered in the table footer"
              }
            ]
          },
          {
            "name": "head()",
            "description": "Default scoped slot for custom rendering of field header. See docs for scoped header",
            "scope": [
              {
                "prop": "column",
                "type": "String",
                "description": "The field's key value"
              },
              {
                "prop": "field",
                "type": "Object",
                "description": "The field's normalized definition object (from the fields prop)"
              },
              {
                "prop": "label",
                "type": "String",
                "description": "The field's label value"
              },
              {
                "prop": "selectAllRows",
                "type": "Function",
                "description": "Select all rows (applicable if the table is in selectable mode)"
              },
              {
                "prop": "clearSelected",
                "type": "Function",
                "description": "Unselect all rows (applicable if the table is in selectable mode)"
              },
              {
                "prop": "isFoot",
                "type": "Boolean",
                "description": "Will be true if the slot is being rendered in the table footer"
              }
            ]
          },
          {
            "name": "foot({key})",
            "pattern": "foot\\([a-zA-Z0-9$_.\\-]+\\)",
            "description": "Scoped slot for custom rendering of field footer. '{key}' is the field's key name. See docs for scoped footer",
            "scope": [
              {
                "prop": "column",
                "type": "String",
                "description": "The field's key value"
              },
              {
                "prop": "field",
                "type": "Object",
                "description": "The field's normalized definition object (from the fields prop)"
              },
              {
                "prop": "label",
                "type": "String",
                "description": "The field's label value"
              },
              {
                "prop": "selectAllRows",
                "type": "Function",
                "description": "Select all rows (applicable if the table is in selectable mode)"
              },
              {
                "prop": "clearSelected",
                "type": "Function",
                "description": "Unselect all rows (applicable if the table is in selectable mode)"
              }
            ]
          },
          {
            "name": "foot()",
            "description": "Default scoped slot for custom rendering of field footer. See docs for scoped footer",
            "scope": [
              {
                "prop": "column",
                "type": "String",
                "description": "The field's key value"
              },
              {
                "prop": "field",
                "type": "Object",
                "description": "The field's normalized definition object (from the fields prop)"
              },
              {
                "prop": "label",
                "type": "String",
                "description": "The field's label value"
              },
              {
                "prop": "selectAllRows",
                "type": "Function",
                "description": "Select all rows (applicable if the table is in selectable mode)"
              },
              {
                "prop": "clearSelected",
                "type": "Function",
                "description": "Unselect all rows (applicable if the table is in selectable mode)"
              }
            ]
          },
          {
            "name": "table-caption",
            "description": "Content to display in the table's caption element"
          },
          {
            "name": "table-colgroup",
            "description": "Slot to place custom colgroup and col elements. Optionally scoped",
            "scope": [
              {
                "prop": "columns",
                "type": "Number",
                "description": "The number of columns in the table"
              },
              {
                "prop": "fields",
                "type": "Array",
                "description": "Array of field definition objects"
              }
            ]
          },
          {
            "name": "table-busy",
            "description": "Optional slot to place loading message when table is in the busy state"
          },
          {
            "name": "row-details",
            "description": "Scoped slot for optional rendering additional record details. See docs for Row details support",
            "scope": [
              {
                "prop": "item",
                "type": "Object",
                "description": "The entire row's record data object"
              },
              {
                "prop": "index",
                "type": "Number",
                "description": "The item's row index number (with respect to the displayed item rows)"
              },
              {
                "prop": "fields",
                "type": "Array",
                "description": "The normalized fields definition array (in the array of objects format)"
              },
              {
                "prop": "toggleDetails",
                "type": "Function",
                "description": "Function to toggle visibility of the row's details slot"
              },
              {
                "prop": "rowSelected",
                "type": "Boolean",
                "version": "2.1.0",
                "description": "Will be true if the row has been selected. Only applicable when table is in selectable mode"
              },
              {
                "prop": "selectRow",
                "type": "Function",
                "version": "2.1.0",
                "description": "Can be called to select the current row. Only applicable when table is in selectable mode"
              },
              {
                "prop": "unselectRow",
                "type": "Function",
                "version": "2.1.0",
                "description": "Can be called to unselect the current row. Only applicable when table is in selectable mode"
              }
            ]
          },
          {
            "name": "empty",
            "description": "Content to display when no items are present in the `items` array. Optionally scoped",
            "scope": [
              {
                "prop": "fields",
                "type": "Array",
                "description": "The normalized fields definition array (in the array of objects format)"
              },
              {
                "prop": "items",
                "type": "Array",
                "description": "The items array. Exposed here to check null vs []"
              },
              {
                "prop": "emptyText",
                "type": "String",
                "description": "The value of the empty-text prop"
              },
              {
                "prop": "emptyHtml",
                "type": "String",
                "description": "The value of the empty-html prop"
              },
              {
                "prop": "emptyFilteredText",
                "type": "String",
                "description": "The value of the empty-filtered-text prop"
              },
              {
                "prop": "emptyFilteredHtml",
                "type": "String",
                "description": "The value of the empty-filtered-html prop"
              }
            ]
          },
          {
            "name": "emptyfiltered",
            "description": "Content to display when no items are present in the filtered `items` array. Optionally scoped",
            "scope": [
              {
                "prop": "fields",
                "type": "Array",
                "description": "The normalized fields definition array (in the array of objects format)"
              },
              {
                "prop": "items",
                "type": "Array",
                "description": "The items array. Exposed here to check null vs []"
              },
              {
                "prop": "emptyText",
                "type": "String",
                "description": "The value of the empty-text prop"
              },
              {
                "prop": "emptyHtml",
                "type": "String",
                "description": "The value of the empty-html prop"
              },
              {
                "prop": "emptyFilteredText",
                "type": "String",
                "description": "The value of the empty-filtered-text prop"
              },
              {
                "prop": "emptyFilteredHtml",
                "type": "String",
                "description": "The value of the empty-filtered-html prop"
              }
            ]
          },
          {
            "name": "thead-top",
            "description": "Slot above the column headers in the `thead` element for user-supplied B-TR's with B-TH/B-TD. Optionally scoped.",
            "scope": [
              {
                "prop": "columns",
                "type": "Number",
                "description": "The number of columns in the table"
              },
              {
                "prop": "fields",
                "type": "Array",
                "description": "The normalized fields definition array (in the array of objects format)"
              },
              {
                "prop": "selectAllRows",
                "type": "Function",
                "description": "Select all rows (applicable if the table is in selectable mode)"
              },
              {
                "prop": "clearSelected",
                "type": "Function",
                "description": "Unselect all rows (applicable if the table is in selectable mode)"
              }
            ]
          },
          {
            "name": "top-row",
            "description": "Fixed top row slot for user supplied B-TD cells. Optionally scoped",
            "scope": [
              {
                "prop": "columns",
                "type": "Number",
                "description": "The number of columns in the table"
              },
              {
                "prop": "fields",
                "type": "Array",
                "description": "The normalized fields definition array (in the array of objects format)"
              }
            ]
          },
          {
            "name": "bottom-row",
            "description": "Fixed bottom row slot for user supplied B-TD cells. Optionally Scoped",
            "scope": [
              {
                "prop": "columns",
                "type": "Number",
                "description": "The number of columns in the table"
              },
              {
                "prop": "fields",
                "type": "Array",
                "description": "The normalized fields definition array (in the array of objects format)"
              }
            ]
          },
          {
            "name": "custom-foot",
            "description": "Custom footer content slot for user supplied B-TR, B-TH, B-TD. Optionally Scoped",
            "scope": [
              {
                "prop": "columns",
                "type": "Number",
                "description": "The number of columns in the table"
              },
              {
                "prop": "fields",
                "type": "Array",
                "description": "The normalized fields definition array (in the array of objects format)"
              },
              {
                "prop": "items",
                "type": "Array",
                "description": "Array of items that are currently being displayed"
              }
            ]
          }
        ]
      },
      {
        "component": "NlyTableLite",
        "props": [
          {
            "prop": "striped",
            "description": "Applies striping to the tbody rows"
          },
          {
            "prop": "bordered",
            "description": "Adds borders to all the cells and headers"
          },
          {
            "prop": "borderless",
            "description": "Removes all borders from cells"
          },
          {
            "prop": "outlined",
            "description": "Adds an outline border to the table element"
          },
          {
            "prop": "dark",
            "description": "Places the table in dark mode"
          },
          {
            "prop": "hover",
            "description": "Enables hover styling on rows"
          },
          {
            "prop": "small",
            "description": "Renders the table with smaller cell padding"
          },
          {
            "prop": "fixed",
            "description": "Makes all columns equal width (fixed layout table). Will speed up rendering for large tables. Column widths can be set via CSS or colgroup"
          },
          {
            "prop": "responsive",
            "description": "Makes the table responsive in width, adding a horizontal scrollbar. Set to true for always responsive or set to one of the breakpoints to switch from responsive to normal: 'sm', 'md', 'lg', 'xl'"
          },
          {
            "prop": "stickyHeader",
            "description": "Makes the table header sticky. Set to true for a maximum height 300px tall table, or set to any valid CSS hight (including units)"
          },
          {
            "prop": "noBorderCollapse",
            "version": "2.0.0",
            "description": "Disable's the collapsing of table borders. Useful when table has sticky headers or columns"
          },
          {
            "prop": "captionTop",
            "description": "Visually place the table caption above the table. Default is below."
          },
          {
            "prop": "tableVariant",
            "description": "Apply a Bootstrap theme color variant to the entire table"
          },
          {
            "prop": "tableClass",
            "description": "CSS class (or classes) to apply to the table element"
          },
          {
            "prop": "stacked",
            "description": "Place the table in stacked mode. Set to true for always stacked, or set to one of the breakpoints to switch from stacked to normal: 'sm', 'md', 'lg', 'xl'"
          },
          {
            "prop": "headVariant",
            "description": "Header variant: 'light' or 'dark', or unset. May take precedence over head-row-variant"
          },
          {
            "prop": "headRowVariant",
            "version": "2.1.0",
            "description": "Apply a Bootstrap theme color variant to the tr element in the thead"
          },
          {
            "prop": "footVariant",
            "description": "Footer variant: 'light' or 'dark', or unset. May take precedence over foot-row-variant"
          },
          {
            "prop": "footRowVariant",
            "version": "2.1.0",
            "description": "Apply a Bootstrap theme color variant to the tr element in the tfoot. Falls back to head-row-variant"
          },
          {
            "prop": "tbodyTransitionProps",
            "description": "Vue 'transition-group' properties. When provided will make the tbody a Vue 'transition-group' component"
          },
          {
            "prop": "tbodyTransitionHandlers",
            "description": "Vue 'transition-group' event handlers. When provided will make the tbody a Vue 'transition-group' component"
          },
          {
            "prop": "caption",
            "description": "Text string to place in the caption element"
          },
          {
            "prop": "captionHtml",
            "description": "HTML string to place in the caption element. Use with caution"
          },
          {
            "prop": "theadClass",
            "description": "CSS class (or classes) to apply to the thead element"
          },
          {
            "prop": "theadTrClass",
            "description": "CSS class (or classes) to apply to the tr element in the thead"
          },
          {
            "prop": "footClone",
            "description": "Enable to the footer of the table, and clone the header content by default"
          },
          {
            "prop": "tfootClass",
            "description": "CSS class (or classes) to apply to the tfoot element"
          },
          {
            "prop": "tfootTrClass",
            "description": "CSS class (or classes) to apply to the tr element in the tfoot"
          },
          {
            "prop": "tbodyClass",
            "description": "CSS class (or classes) to apply to the tbody element"
          },
          {
            "prop": "tbodyTrClass",
            "description": "CSS class (or classes) to apply to the tr element in the tbody. Can be a function that returns a class (see docs for details)"
          },
          {
            "prop": "tbodyTrAttr",
            "version": "0.4.4",
            "description": "Attributes to be added to each tr in the tbody, or a function returning such attributes (see docs for details)"
          },
          {
            "prop": "detailsTdClass",
            "version": "2.1.0",
            "description": "CSS class (or classes) to apply to the td element in the details row"
          },
          {
            "prop": "value",
            "description": "Currently displayed row data. Read-only. Do not set a value on this prop"
          },
          {
            "prop": "fields",
            "description": "Array of field names or array of field definition objects"
          },
          {
            "prop": "items",
            "description": "Array of items to display"
          },
          {
            "prop": "primaryKey",
            "description": "Name of a table field that contains a guaranteed unique value per row. Needed for tbody transition support, and also speeds up table rendering"
          }
        ],
        "events": [
          {
            "event": "row-clicked",
            "description": "Emitted when a row is clicked.",
            "args": [
              {
                "arg": "item",
                "type": "Object",
                "description": "Item data of the row being clicked."
              },
              {
                "arg": "index",
                "type": "Number",
                "description": "Index of the row being clicked."
              },
              {
                "arg": "event",
                "type": [
                  "MouseEvent",
                  "KeyboardEvent"
                ],
                "description": "Native event object."
              }
            ]
          },
          {
            "event": "row-dblclicked",
            "description": "Emitted when a row is double clicked.",
            "args": [
              {
                "arg": "item",
                "type": "Object",
                "description": "Item data of the row being double clicked."
              },
              {
                "arg": "index",
                "type": "Number",
                "description": "Index of the row being double clicked."
              },
              {
                "arg": "event",
                "type": "MouseEvent",
                "description": "Native event object."
              }
            ]
          },
          {
            "event": "row-middle-clicked",
            "description": "Emitted when a row is middle clicked.",
            "args": [
              {
                "arg": "item",
                "type": "Object",
                "description": "Item data of the row being middle clicked."
              },
              {
                "arg": "index",
                "type": "Number",
                "description": "Index of the row being middle clicked."
              },
              {
                "arg": "event",
                "type": "MouseEvent",
                "description": "Native event object."
              }
            ]
          },
          {
            "event": "row-contextmenu",
            "description": "Emitted when a row is right clicked.",
            "args": [
              {
                "arg": "item",
                "type": "Object",
                "description": "Item data of the row being right clicked."
              },
              {
                "arg": "index",
                "type": "Number",
                "description": "Index of the row being right clicked."
              },
              {
                "arg": "event",
                "type": "MouseEvent",
                "description": "Native event object."
              }
            ]
          },
          {
            "event": "row-hovered",
            "description": "Emitted when a row is hovered.",
            "args": [
              {
                "arg": "item",
                "type": "Object",
                "description": "Item data of the row being hovered."
              },
              {
                "arg": "index",
                "type": "Number",
                "description": "Index of the row being hovered."
              },
              {
                "arg": "event",
                "type": "MouseEvent",
                "description": "Native event object."
              }
            ]
          },
          {
            "event": "row-unhovered",
            "description": "Emitted when a row is unhovered.",
            "args": [
              {
                "arg": "item",
                "type": "Object",
                "description": "Item data of the row being unhovered."
              },
              {
                "arg": "index",
                "type": "Number",
                "description": "Index of the row being unhovered."
              },
              {
                "arg": "event",
                "type": "MouseEvent",
                "description": "Native event object."
              }
            ]
          },
          {
            "event": "head-clicked",
            "description": "Emitted when a header or footer cell is clicked. Not applicable for 'custom-foot' slot.",
            "args": [
              {
                "arg": "key",
                "type": "String",
                "description": "Column key clicked (field name)."
              },
              {
                "arg": "field",
                "type": "Object",
                "description": "Field definition object."
              },
              {
                "arg": "event",
                "type": [
                  "MouseEvent",
                  "KeyboardEvent"
                ],
                "description": "Native event object."
              },
              {
                "arg": "isFooter",
                "type": "Boolean",
                "description": "'True' if this event originated from clicking on the footer cell"
              }
            ]
          }
        ],
        "slots": [
          {
            "name": "cell({key})",
            "pattern": "cell\\([a-zA-Z0-9$_.\\-]+\\)",
            "description": "Scoped slot for custom data rendering of field data. '{key}' is the field's key name.",
            "scope": [
              {
                "prop": "index",
                "type": "Number",
                "description": "The row's index (zero-based) with respect to the displayed rows"
              },
              {
                "prop": "item",
                "type": "Object",
                "description": "The row's item data object"
              },
              {
                "prop": "value",
                "description": "The value for this key in the record (null or undefined if a virtual column), or the output of the field's formatter function"
              },
              {
                "prop": "unformatted",
                "description": "The raw value for this key in the item record (null or undefined if a virtual column), before being passed to the field's formatter function"
              },
              {
                "prop": "field",
                "type": "Object",
                "description": "The field's normalized definition object (from the fields prop)"
              },
              {
                "prop": "detailsShowing",
                "type": "Boolean",
                "description": "Will be true if the row's row-details scoped slot is visible"
              },
              {
                "prop": "toggleDetails",
                "type": "Function",
                "description": "Can be called to toggle the visibility of the rows row-details scoped slot"
              }
            ]
          },
          {
            "name": "cell()",
            "description": "Default scoped slot for custom data rendering of field data.",
            "scope": [
              {
                "prop": "index",
                "type": "Number",
                "description": "The row's index (zero-based) with respect to the displayed rows"
              },
              {
                "prop": "item",
                "type": "Object",
                "description": "The row's item data object"
              },
              {
                "prop": "value",
                "description": "The value for this key in the record (null or undefined if a virtual column), or the output of the field's formatter function"
              },
              {
                "prop": "unformatted",
                "description": "The raw value for this key in the item record (null or undefined if a virtual column), before being passed to the field's formatter function"
              },
              {
                "prop": "field",
                "type": "Object",
                "description": "The field's normalized definition object (from the fields prop)"
              },
              {
                "prop": "detailsShowing",
                "type": "Boolean",
                "description": "Will be true if the row's row-details scoped slot is visible"
              },
              {
                "prop": "toggleDetails",
                "type": "Function",
                "description": "Can be called to toggle the visibility of the rows row-details scoped slot"
              }
            ]
          },
          {
            "name": "head({key})",
            "pattern": "head\\([a-zA-Z0-9$_.\\-]+\\)",
            "description": "Scoped slot for custom rendering of field header. '{key}' is the field's key name",
            "scope": [
              {
                "prop": "column",
                "type": "String",
                "description": "The field's key value"
              },
              {
                "prop": "field",
                "type": "Object",
                "description": "The field's normalized definition object (from the fields prop)"
              },
              {
                "prop": "label",
                "type": "String",
                "description": "The field's label value"
              },
              {
                "prop": "isFoot",
                "type": "Boolean",
                "description": "Will be true if the slot is being rendered in the table footer"
              }
            ]
          },
          {
            "name": "head()",
            "description": "Default scoped slot for custom rendering of field header.",
            "scope": [
              {
                "prop": "column",
                "type": "String",
                "description": "The field's key value"
              },
              {
                "prop": "field",
                "type": "Object",
                "description": "The field's normalized definition object (from the fields prop)"
              },
              {
                "prop": "label",
                "type": "String",
                "description": "The field's label value"
              },
              {
                "prop": "isFoot",
                "type": "Boolean",
                "description": "Will be true if the slot is being rendered in the table footer"
              }
            ]
          },
          {
            "name": "foot({key})",
            "pattern": "foot\\([a-zA-Z0-9$_.\\-]+\\)",
            "description": "Scoped slot for custom rendering of field footer. '{key}' is the field's key name.",
            "scope": [
              {
                "prop": "column",
                "type": "String",
                "description": "The field's key value"
              },
              {
                "prop": "field",
                "type": "Object",
                "description": "The field's normalized definition object (from the fields prop)"
              },
              {
                "prop": "label",
                "type": "String",
                "description": "The field's label value"
              }
            ]
          },
          {
            "name": "foot()",
            "description": "Default scoped slot for custom rendering of field footer",
            "scope": [
              {
                "prop": "column",
                "type": "String",
                "description": "The field's key value"
              },
              {
                "prop": "field",
                "type": "Object",
                "description": "The field's normalized definition object (from the fields prop)"
              },
              {
                "prop": "label",
                "type": "String",
                "description": "The field's label value"
              }
            ]
          },
          {
            "name": "table-caption",
            "description": "Content to display in the table's caption element"
          },
          {
            "name": "table-colgroup",
            "description": "Slot to place custom colgroup and col elements. Optionally scoped",
            "scope": [
              {
                "prop": "columns",
                "type": "Number",
                "description": "The number of columns in the table"
              },
              {
                "prop": "fields",
                "type": "Array",
                "description": "Array of field definition objects"
              }
            ]
          },
          {
            "name": "row-details",
            "description": "Scoped slot for optional rendering additional record details. See docs for Row details support",
            "scope": [
              {
                "prop": "item",
                "type": "Object",
                "description": "The entire row's record data object"
              },
              {
                "prop": "index",
                "type": "Number",
                "description": "The item's row index number (with respect to the displayed item rows)"
              },
              {
                "prop": "fields",
                "type": "Array",
                "description": "The normalized fields definition array (in the array of objects format)"
              },
              {
                "prop": "toggleDetails",
                "type": "Function",
                "description": "Function to toggle visibility of the row's details slot"
              }
            ]
          },
          {
            "name": "thead-top",
            "description": "Slot above the column headers in the `thead` element for user-supplied B-TR with B-TH/B-TD. Optionally scoped.",
            "scope": [
              {
                "prop": "columns",
                "type": "Number",
                "description": "The number of columns in the table"
              },
              {
                "prop": "fields",
                "type": "Array",
                "description": "The normalized fields definition array (in the array of objects format)"
              },
              {
                "prop": "selectAllRows",
                "type": "Function",
                "description": "Select all rows (applicable if the table is in selectable mode)"
              },
              {
                "prop": "clearSelected",
                "type": "Function",
                "description": "Unselect all rows (applicable if the table is in selectable mode)"
              }
            ]
          },
          {
            "name": "custom-foot",
            "description": "Custom footer content slot for user supplied B-TR's with B-TH/B-TD. Optionally Scoped",
            "scope": [
              {
                "prop": "columns",
                "type": "Number",
                "description": "The number of columns in the table"
              },
              {
                "prop": "fields",
                "type": "Array",
                "description": "The normalized fields definition array (in the array of objects format)"
              },
              {
                "prop": "items",
                "type": "Array",
                "description": "Array of items that are currently being displayed"
              }
            ]
          }
        ]
      },
      {
        "component": "NlyTableSimple",
        "props": [
          {
            "prop": "striped",
            "description": "Applies striping to the tbody rows"
          },
          {
            "prop": "bordered",
            "description": "Adds borders to all the cells and headers"
          },
          {
            "prop": "borderless",
            "description": "Removes all borders from cells"
          },
          {
            "prop": "outlined",
            "description": "Adds an outline border to the table element"
          },
          {
            "prop": "dark",
            "description": "Places the table in dark mode"
          },
          {
            "prop": "hover",
            "description": "Enables hover styling on rows"
          },
          {
            "prop": "small",
            "description": "Renders the table with smaller cell padding"
          },
          {
            "prop": "fixed",
            "description": "Makes all columns equal width (fixed layout table). Will speed up rendering for large tables. Column widths can be set via CSS or colgroup"
          },
          {
            "prop": "responsive",
            "description": "Makes the table responsive in width, adding a horizontal scrollbar. Set to true for always responsive or set to one of the breakpoints to switch from responsive to normal: 'sm', 'md', 'lg', 'xl'"
          },
          {
            "prop": "stickyHeader",
            "description": "Makes the table header sticky. Set to true for a maximum height 300px tall table, or set to any valid CSS hight (including units)"
          },
          {
            "prop": "noBorderCollapse",
            "version": "2.0.0",
            "description": "Disable's the collapsing of table borders. Useful when table has sticky headers or columns"
          },
          {
            "prop": "captionTop",
            "description": "Visually place the table caption above the table. Default is below."
          },
          {
            "prop": "tableVariant",
            "description": "Apply a Bootstrap theme color variant to the entire table"
          },
          {
            "prop": "tableClass",
            "description": "CSS class (or classes) to apply to the table element"
          },
          {
            "prop": "stacked",
            "description": "Place the table in stacked mode. Set to true for always stacked, or set to one of the breakpoints to switch from stacked to normal: 'sm', 'md', 'lg', 'xl'"
          }
        ]
      },
      {
        "component": "NlyTbody",
        "props": [
          {
            "prop": "tbodyTransitionProps",
            "description": "Vue 'transition-group' properties. When provided will make the tbody a Vue 'transition-group' component"
          },
          {
            "prop": "tbodyTransitionHandlers",
            "description": "Vue 'transition-group' event handlers. When provided will make the tbody a Vue 'transition-group' component"
          }
        ]
      },
      {
        "component": "NlyThead",
        "props": [
          {
            "prop": "headVariant",
            "description": "Header variant: 'light' or 'dark', or unset"
          }
        ]
      },
      {
        "component": "NlyTfoot",
        "props": [
          {
            "prop": "footVariant",
            "description": "Footer variant: 'light' or 'dark', or unset"
          }
        ]
      },
      {
        "component": "NlyTr"
      },
      {
        "component": "NlyTd",
        "props": [
          {
            "prop": "colspan",
            "description": "Number of columns this cell spans"
          },
          {
            "prop": "rowspan",
            "description": "Number of rows this cell spans"
          },
          {
            "prop": "stackedHeading",
            "description": "Heading for the cell when in stacked mode. Only applicable to cells in the 'tbody' element"
          },
          {
            "prop": "stickyColumn",
            "description": "If this will be a sticky colum. Must be set on all cells in this column. table must be in sticky-header or responsive mode to work"
          }
        ]
      },
      {
        "component": "NlyTh",
        "props": [
          {
            "prop": "colspan",
            "description": "Number of columns this cell spans"
          },
          {
            "prop": "rowspan",
            "description": "Number of rows this cell spans"
          },
          {
            "prop": "stackedHeading",
            "description": "Heading for the cell when in stacked mode. Only applicable to cells in the 'tbody' element"
          },
          {
            "prop": "stickyColumn",
            "description": "If this will be a sticky colum. Must be set on all cells in this column. table must be in sticky-header or responsive mode to work"
          }
        ]
      }
    ]
  }
}
